passport.serializeUser(function(user, done) {
    done(null, user);     
});                                                                 // user is our object.
  
passport.deserializeUser(function(user, done) {
    done(null, user);
});

--> 
1) serialiseUser :
    when we call passport.serialiseUser(done , user)
    The user (you provide as the second argument of the done function) is saved in the session 
    ans is later used to retrieve the whole object via the deserializeUser function.

    serializeUser determines which data of the user object should be stored in the session. 
    The result of the serializeUser method is attached to the session as req.session.passport.user = {}.

2) deserialiseUser : 
    The first argument of deserializeUser corresponds to the key of the user object that was given to the done function (see 1.). 
    So your whole object is retrieved with help of that key.(in our ex: we gave entire object as key :)).
    That key here is the user id (key can be any key of the user object i.e. name,email etc). In deserializeUser that key is matched 
    with the in memory array / database or any data resource.
    The fetched object is attached to the request object as req.user

serialise and deserialise using id : 
// used to serialize the user for the session
passport.serializeUser(function(user, done) {
    done(null, user.id); 
   // where is this user.id going? Are we supposed to access this anywhere?
});

// used to deserialize the user
passport.deserializeUser(function(id, done) {
    User.findById(id, function(err, user) {
        done(err, user);
    });
});

___________________________________________________flow_______________________________________________

passport.serializeUser(function(user, done) {
    done(null, user.id);
});              │
                 │ 
                 │
                 └─────────────────┬──→ saved to session
                                   │    req.session.passport.user = {id: '..'}
                                   │
                                   ↓           
passport.deserializeUser(function(id, done) {
                   ┌───────────────┘
                   │
                   ↓ 
    User.findById(id, function(err, user) {
        done(err, user);
    });            └──────────────→ user object attaches to the request as req.user   
});


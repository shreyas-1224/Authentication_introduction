task : secrets.ejs is the page we need to secure. i.e : we cant let users view or use
       this page without their verification or sign-up.

Level 1 : Authenticating with username and password.
        create a user database and then check email with password. This is lowest level 
        of security.
        This is the most unsecure way of handling the data. also, storing user's email and
        password in plain text is really dangerous.

Level 2 : Database encryption. 
        use mongoose.encryption package. it can encrypt and Authenticate. Data in database
        is encrypted now but still, we have hardcoded the secret key in our app.js. So, if
        someone hacks into app.js and aquires our key, database decryption will be supereasy.

Level 3 : Enviornment variable.
          create a .env file and save key in that file and then use  process.env.key in code.
          dont upload that .env file on github :) 
        
Level 4 : Hashing password.
          enviornment variables are strong but still not safest option. Thus, we use hash function
          cause hash function can not be decoded easily. for ex: 2ms are required for forward Hashing
          while 2 years for backword hashing.
          use npm md5 module

Level % : Added bcrypt module.
          to avoid dictionary passwords, we salt the password. i.e : add extra text at end and then hash
          


_________________________________________________________________________________________________________

About cookies and session id:
modules imported are : passport , passport-local

// for cookies and session.
app.set('trust proxy', 1) // trust first proxy
app.use(session({
  secret: 'i love my life very much.',                  
  resave: false,
  saveUninitialized: false,
}));

userSchema.plugin(passportLocalMongoose);
-> hash and salt the password. and save users. 

USE below code below the mongoose model. Our model name was User

// use static authenticate method of model in LocalStrategy
passport.use(User.createStrategy());
--> create a strategy to authenticate the user. then serialise and deserialise the cookie.

// use static serialize and deserialize of model for passport session support
passport.serializeUser(User.serializeUser());                   // stuff the data in cookie.
passport.deserializeUser(User.deserializeUser());               // get the data from cookie.

* register a user : 
   User.register() 
   --> comes from passportLocalMongoose. Because of this dont have to interact directly with mongoose.
   we can avoid creating new user and saving data. This package does that for us.     

app.post("/register", (req , res)=>{
    // make sure in ejs/html form also you use the same tern "username" and "password".
    // this automatically insert mongodb document in our collection.
    User.register({username : req.body.username} , req.body.password , (error , user)=>{
        if(error){
            console.log(error);
            res.redirect("/register");
        }else{
            passport.authenticate("local")(req , res , ()=>{            // uses local strategy to authenticate
                res.redirect("/secrets");                               // now we are authenticated.
            });
        }
    });


    in app.get("/secrets" , (req , res)=>){
        // check if we are authenticated or not.
        if(req.isAuthenticated()){
                res.render("secrets");
        }else{
                res.redirect("/login");
        }
    }
});


// login using password.
use log in feature from passport. create username and passport object.
const user = ...
req.login(user , (err)=>{
        if(!err){
                passport.authenticate("local)(req , res , ()=>{
                        res.redirect("secrets);
                });
        }
} );


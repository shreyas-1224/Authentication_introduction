task : secrets.ejs is the page we need to secure. i.e : we cant let users view or use
       this page without their verification or sign-up.

Level 1 : Authenticating with username and password.
        create a user database and then check email with password. This is lowest level 
        of security.
        This is the most unsecure way of handling the data. also, storing user's email and
        password in plain text is really dangerous.

Level 2 : Database encryption. 
        use mongoose.encryption package. it can encrypt and Authenticate. Data in database
        is encrypted now but still, we have hardcoded the secret key in our app.js. So, if
        someone hacks into app.js and aquires our key, database decryption will be supereasy.

Level 3 : Enviornment variable.
          create a .env file and save key in that file and then use  process.env.key in code.
          dont upload that .env file on github :) 
        
Level 4 : Hashing password.
          enviornment variables are strong but still not safest option. Thus, we use hash function
          cause hash function can not be decoded easily. for ex: 2ms are required for forward Hashing
          while 2 years for backword hashing.
          use npm md5 module

Level % : Added bcrypt module.
          to avoid dictionary passwords, we salt the password. i.e : add extra text at end and then hash
          




